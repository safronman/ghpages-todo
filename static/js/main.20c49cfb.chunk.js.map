{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistList/todolists-reducer.ts","features/TodolistList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css","features/TodolistList/Todolist/Todolist.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppInitializedAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItemHandler","trim","addItem","style","textAlign","TextField","variant","disabled","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","classes","isDone","Checkbox","Delete","Todolist","useDispatch","useEffect","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","paddingTop","Button","TodolistList","todolists","useSelector","state","auth","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodoTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","opacity","to","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.20c49cfb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '794181ab-6d62-4cfb-bc9f-d539dfac55f1'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n","import {setAppErrorAC, SetAppStatus, setAppStatusAC, SetAppError} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppStatus | SetAppError>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<SetAppStatus | SetAppError>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from 'redux'\r\nimport {SetAppError, SetAppStatus, setAppStatusAC} from '../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action:\r\n    ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatus |\r\n    SetAppError","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../Login/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n//status === 'loading' крутилку показываем в остальных нет\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: 'ERROR' as string | null,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\nexport const appReducer = (state: InitialStateType = initialState, action:\r\n    ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppInitializedAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type SetAppError = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatus = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitialized = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType = SetAppError | SetAppStatus | SetAppInitialized","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppStatus, setAppStatusAC, SetAppError} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLIST':\r\n            return action.todolist.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistAC = (todolist: Array<TodolistType>) => ({type: 'SET-TODOLIST', todolist} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodoTitleTC = (id: string, title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatus | SetAppError>","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppStatus, setAppStatusAC, SetAppError} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.todolist.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatus | SetAppError>","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div style={{textAlign: \"center\"}}>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={props.disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport classes from \"./../../../../app/App.module.css\"\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? classes.isDone : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport classes from \"./Todolist.module.css\"\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div className={classes.todolist}>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px', textAlign: \"center\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, changeTodoTitleTC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = updateTaskTC(id, {title: newTitle}, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodoTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={5}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"5px\", opacity: \"0.9\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField,\r\n    Button, Grid\r\n} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\" style={{textAlign: \"center\"}}>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'}\r\n                                color={'primary'}>Sign In</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport classes from './App.module.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../Login/Login\";\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {logoutTC} from \"../Login/auth-reducer\";\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div>\r\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}><h1 style={{color: \"blue\"}}>ToDo</h1></div>\r\n            <div style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        </div>\r\n    }\r\n    const handlerLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={classes.app}>\r\n            <AppBar color={\"secondary\"} position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"Menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={\"contained\"} color={\"primary\"} onClick={handlerLogout}>Log Out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                  {/*  <Route path={'/404'}\r\n                           render={() => <h1 style={{textAlign: 'center', fontSize: '50px'}}>404: PAGE NOT\r\n                               FOUND</h1>}/>*/}\r\n                    <Redirect from={'*'} to={'/login'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__rCIS_\",\"isDone\":\"App_isDone__1h8eZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1kC7l\"};"],"sourceRoot":""}